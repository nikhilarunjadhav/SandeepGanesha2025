@model GanpatiFestivalGame.Models.ViewModels.UserDashboardViewModel
@{
    ViewData["Title"] = "Ganpati Collection Game";
}

<style>
    .ganpati-bg {
        background: linear-gradient(135deg, #ff9933 0%, #ffcc33 50%, #ff6600 100%);
        min-height: 100vh;
    }
    
    .festival-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    .avatar-card {
        background: linear-gradient(145deg, #ffffff, #f0f0f0);
        border-radius: 15px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border: 3px solid transparent;
    }
    
    .avatar-card.collected {
        border-color: #28a745;
        box-shadow: 0 0 20px rgba(40, 167, 69, 0.3);
    }
    
    .avatar-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    }
    
    .scratch-card {
        background: linear-gradient(45deg, #FFD700, #FFA500);
        border-radius: 20px;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }
    
    .scratch-card:hover {
        transform: scale(1.05);
        box-shadow: 0 15px 35px rgba(255, 165, 0, 0.4);
    }
    
    .scratch-card::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.4), transparent);
        animation: shine 3s infinite;
    }
    
    @keyframes shine {
        0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
        100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
    }
    
    .progress-ring {
        transform: rotate(-90deg);
    }
    
    .progress-ring-circle {
        stroke-dasharray: 251.32;
        stroke-dashoffset: 251.32;
        transition: stroke-dashoffset 0.5s ease-in-out;
    }
    
    .ganpati-icon {
        font-size: 2rem;
        color: #ff6600;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }
</style>

<div class="ganpati-bg">
    <div class="container-fluid p-4">
        <!-- Header -->
        <div class="text-center text-white mb-4">
            <h1 class="display-4 fw-bold">üïâÔ∏è Ganpati Collection Game üïâÔ∏è</h1>
            <p class="lead">Collect all 8 Ashtavinayak Avatars</p>
        </div>

        <div class="row">
            <!-- User Stats Card -->
            <div class="col-lg-4 mb-4">
                <div class="festival-card p-4">
                    <div class="text-center">
                        <h3 class="text-primary mb-3">üèÜ Your Progress</h3>
                        <div class="position-relative d-inline-block">
                            <svg class="progress-ring" width="120" height="120">
                                <circle class="progress-ring-circle" stroke="#28a745" stroke-width="8" fill="transparent" r="40" cx="60" cy="60" style="stroke-dashoffset: calc(251.32 - (251.32 * @Model.CompletionPercentage) / 100);"/>
                                <circle stroke="#e9ecef" stroke-width="8" fill="transparent" r="40" cx="60" cy="60"/>
                            </svg>
                            <div class="position-absolute top-50 start-50 translate-middle text-center">
                                <div class="h4 fw-bold">@Model.CollectedAvatars.Count/8</div>
                                <small>Collected</small>
                            </div>
                        </div>
                        <div class="mt-3">
                            <h5>Completion: @Model.CompletionPercentage.ToString("F1")%</h5>
                            <p class="text-muted">Rank: #@Model.UserRank</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Daily Scratch Card -->
            <div class="col-lg-4 mb-4">
                <div class="festival-card p-4">
                    <h3 class="text-center text-primary mb-3">üé´ Daily Scratch Card</h3>
                    @if (Model.CanScratchToday)
                    {
                        <div class="scratch-card text-center p-4" id="scratchCard" onclick="scratchCard()">
                            <div class="ganpati-icon">üêò</div>
                            <h4 class="text-white fw-bold mt-2">SCRATCH ME!</h4>
                            <p class="text-white">Get your daily avatar chance</p>
                        </div>
                    }
                    else
                    {
                        <div class="text-center p-4 bg-light rounded">
                            <div class="text-muted">‚è∞</div>
                            <h5 class="text-muted">Next scratch available in:</h5>
                            <div id="countdown" class="h4 text-primary">
                                @if (Model.TimeUntilNextScratch.HasValue)
                                {
                                    <span>@Model.TimeUntilNextScratch.Value.Hours:@Model.TimeUntilNextScratch.Value.Minutes.ToString("D2"):@Model.TimeUntilNextScratch.Value.Seconds.ToString("D2")</span>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Mini Leaderboard -->
            <div class="col-lg-4 mb-4">
                <div class="festival-card p-4">
                    <h3 class="text-primary mb-3">üèÖ Top Collectors</h3>
                    <div class="list-group list-group-flush">
                        @foreach (var leader in Model.Leaderboard.Take(5))
                        {
                            <div class="list-group-item d-flex justify-content-between align-items-center border-0 @(leader.UserId == Model.User.Id ? "bg-primary text-white" : "")">
                                <div>
                                    <strong>#@leader.Rank</strong> @leader.UserName
                                </div>
                                <span class="badge @(leader.UserId == Model.User.Id ? "bg-light text-dark" : "bg-primary")">@leader.CollectedCount/8</span>
                            </div>
                        }
                    </div>
                    <div class="text-center mt-3">
                        <a href="@Url.Action("Leaderboard")" class="btn btn-outline-primary">View Full Leaderboard</a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Avatar Collection Grid -->
        <div class="row">
            <div class="col-12">
                <div class="festival-card p-4">
                    <h3 class="text-primary mb-4 text-center">üïâÔ∏è Ashtavinayak Collection üïâÔ∏è</h3>
                    <div class="row">
                        @foreach (var avatar in Model.CollectedAvatars.Concat(Model.RemainingAvatars))
                        {
                            var isCollected = Model.CollectedAvatars.Contains(avatar);
                            <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                                <div class="avatar-card p-3 h-100 @(isCollected ? "collected" : "")">
                                    <div class="text-center">
                                        @if (isCollected)
                                        {
                                            <div class="position-relative">
                                                <img src="@avatar.ImageUrl" alt="@avatar.Name" class="img-fluid rounded-circle" style="width: 80px; height: 80px; object-fit: cover;">
                                                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-success">‚úì</span>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="bg-light rounded-circle d-flex align-items-center justify-content-center mx-auto" style="width: 80px; height: 80px;">
                                                <span class="text-muted fs-1">?</span>
                                            </div>
                                        }
                                        <h5 class="mt-2 @(isCollected ? "text-success" : "text-muted")">@avatar.Name</h5>
                                        <p class="small @(isCollected ? "" : "text-muted")">@avatar.Location</p>
                                        @if (isCollected)
                                        {
                                            <span class="badge bg-success">Collected ‚ú®</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Not Found</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Scratch Result Modal -->
<div class="modal fade" id="scratchResultModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">üéä Scratch Result üéä</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center" id="scratchResult">
                <!-- Result will be populated here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    function scratchCard() {
        const scratchCard = document.getElementById('scratchCard');
        scratchCard.style.pointerEvents = 'none';
        scratchCard.innerHTML = '<div class="spinner-border text-white" role="status"><span class="visually-hidden">Loading...</span></div><p class="text-white mt-2">Scratching...</p>';

        fetch('@Url.Action("ScratchCard")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showScratchResult(data.won, data.avatar);
                if (data.won) {
                    setTimeout(() => location.reload(), 3000);
                }
            } else {
                alert(data.message);
                location.reload();
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred. Please try again.');
            location.reload();
        });
    }

    function showScratchResult(won, avatar) {
        let resultHtml = '';
        if (won) {
            resultHtml = `
                <div class="text-success">
                    <div class="fs-1">üéâ</div>
                    <h4>Congratulations!</h4>
                    <p>You won <strong>${avatar.name}</strong> from ${avatar.location}!</p>
                    <img src="${avatar.imageUrl}" alt="${avatar.name}" class="img-fluid rounded-circle mt-2" style="width: 100px; height: 100px; object-fit: cover;">
                </div>
            `;
        } else {
            resultHtml = `
                <div class="text-warning">
                    <div class="fs-1">üòî</div>
                    <h4>Better luck tomorrow!</h4>
                    <p>You didn't win <strong>${avatar.name}</strong> this time.</p>
                    <p class="small text-muted">Keep trying daily to complete your collection!</p>
                </div>
            `;
        }
        
        document.getElementById('scratchResult').innerHTML = resultHtml;
        new bootstrap.Modal(document.getElementById('scratchResultModal')).show();
    }

    // Countdown timer for next scratch
    @if (!Model.CanScratchToday && Model.TimeUntilNextScratch.HasValue)
    {
        <text>
        let timeRemaining = @((int)Model.TimeUntilNextScratch.Value.TotalSeconds);
        
        function updateCountdown() {
            if (timeRemaining <= 0) {
                location.reload();
                return;
            }
            
            const hours = Math.floor(timeRemaining / 3600);
            const minutes = Math.floor((timeRemaining % 3600) / 60);
            const seconds = timeRemaining % 60;
            
            document.getElementById('countdown').textContent = 
                hours.toString().padStart(2, '0') + ':' + 
                minutes.toString().padStart(2, '0') + ':' + 
                seconds.toString().padStart(2, '0');
            
            timeRemaining--;
        }
        
        updateCountdown();
        setInterval(updateCountdown, 1000);
        </text>
    }
</script>